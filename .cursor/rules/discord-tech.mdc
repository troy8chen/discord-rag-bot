---
description: 
globs: 
alwaysApply: true
---
# Discord Bot Technical Guidelines

## Discord.js Best Practices

### Client Setup & Performance
- Use minimal required intents for security and performance
- Implement graceful shutdown handling with cleanup
- Set up proper event listeners with comprehensive error handling
- Use response caching for frequent RAG queries (5-minute TTL)

### Message Handling Rules
- **Response Time**: Always respond within 3 seconds or use `deferReply()`
- **Character Limits**: 
  - Messages: 2000 characters (split longer responses)
  - Embeds: 6000 characters total, 1024 per field
  - Files: 25MB limit (8MB for non-Nitro servers)
- **Rate Limiting**: Implement queue for high traffic scenarios
- **Context**: Store conversation context in memory, clear after 30min timeout

### Error Handling Patterns
```typescript
// Standard Discord error handling
try {
  await interaction.reply(response);
} catch (error) {
  if (error.code === 10062) return; // Unknown interaction
  console.error('Discord API Error:', error);
  // Always provide fallback response
}
```

### Security & Validation
- Never log Discord tokens or sensitive data
- Validate all user inputs before RAG processing
- Implement per-user command cooldowns (5-10 seconds)
- Use Discord's permission system for admin commands
- Sanitize all responses to prevent injection

## Environment Configuration

### Required Variables
```env
# Discord Bot
DISCORD_BOT_TOKEN=your_bot_token
DISCORD_CLIENT_ID=your_app_id
DISCORD_GUILD_ID=test_server_id     # Development only

# RAG Integration  
RAG_API_URL=http://localhost:3000
RAG_API_TIMEOUT=30000               # 30 seconds
RAG_API_RETRIES=3

# Performance & Security
LOG_LEVEL=info                      # debug, info, warn, error
MAX_CONCURRENT_REQUESTS=10
RESPONSE_TIMEOUT=25000              # 25 seconds (Discord 30s limit)
RATE_LIMIT_PER_MINUTE=60
ADMIN_USER_IDS=123456789,987654321  # Discord user IDs
```

### Configuration Validation
Always validate critical environment variables on startup:
```typescript
const required = ['DISCORD_BOT_TOKEN', 'RAG_API_URL'];
for (const key of required) {
  if (!process.env[key]) {
    throw new Error(`Missing required: ${key}`);
  }
}
```

## RAG Response Formatting

### Discord-Optimized Responses
- Use Discord markdown: ```typescript for code blocks
- Format bullet points with Discord-compatible syntax
- Include clickable source URLs
- Use embeds for structured, rich responses
- Split long responses into logical chunks (1800 char max per message)

### Streaming Response Handling
```typescript
// Convert RAG streaming to Discord chunks
async function formatStreamingResponse(stream) {
  let buffer = '';
  const chunks = [];
  
  for await (const chunk of stream) {
    buffer += chunk;
    if (buffer.length > 1800) {
      chunks.push(buffer);
      buffer = '';
    }
  }
  return chunks;
}
```
```

### **`.cursor/rules/qa-deployment.mdc`**
*(Consolidates testing guidelines + deployment checklist)*

```markdown
# Quality Assurance & Deployment

## Testing Strategy

### Test Structure
```
src/
├── __tests__/
│   ├── unit/           # RAG client, utilities, formatters
│   ├── integration/    # Discord event handling, API integration  
│   └── e2e/           # Full conversation flows
└── __mocks__/         # Discord.js and RAG API mocks